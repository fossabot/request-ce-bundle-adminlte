<%!

    public static class SubmissionHelper {

        private HttpServletRequest request;
        private BundleSubmissionComponent submissionComponent;
        private Kapp kapp;
        private Space space;

        public SubmissionHelper(HttpServletRequest request) {
            this.request = request;
            this.submissionComponent = (BundleSubmissionComponent)request.getAttribute("Submissions");
            this.kapp = (Kapp)request.getAttribute("kapp");
            this.space = (Space)request.getAttribute("space");
        }

        public List<Submission> retrieveRecentSubmissions(String type) {
            return retrieveRecentSubmissions(type, null, null);
        }

        public List<Submission> retrieveRecentSubmissions(String type, int number) {
            return retrieveRecentSubmissions(type, null, number);
        }
        
         public List<Submission> retrieveRecentSubmissions(String type, String coreState) {
            return retrieveRecentSubmissions(type, coreState, null);
        }

        public List<Submission> retrieveRecentSubmissions(String type, String coreState, Integer number) {
            com.kineticdata.core.authentication.Identity identity =
                (com.kineticdata.core.authentication.Identity) request.getAttribute("identity");

            java.time.Instant end = Time.now();
            java.time.Instant start = Time
                .subtract(end, 30, "days", java.time.ZoneId.systemDefault());

            java.util.Map<String,String[]> searchOptions = new java.util.HashMap<>();

            searchOptions.put("end", new String[] {Time.format(end)} );
            searchOptions.put("start", new String[] {Time.format(start)} );
            searchOptions.put("type", new String[] {type});
            if (coreState != null) {
                searchOptions.put("coreState", new String[] {coreState});
            }
            if (number != null) {
                searchOptions.put("limit", new String[] {String.valueOf(number)});
            }
            if("Approval".equals(type)){
                searchOptions.put("values[Assigned Individual]", new String[] {identity.getUsername()});
            } else {
                searchOptions.put("createdBy", new String[] {identity.getUsername()});
            }

            return submissionComponent.searchByKapp(kapp, searchOptions);
        }

        public List<Submission> searchResultsSubmissions(String wasFound) {
            java.util.Map<String,String[]> searchOptions = new java.util.HashMap<>();
            searchOptions.put("limit", new String[] {"999"});
            if( ("true").equals(wasFound) ) {
                searchOptions.put("values[Results Found]", new String[] {"true"});
            } 
            if ( ("false").equals(wasFound) ) {
                searchOptions.put("values[Results Found]", new String[] {"false"});
            }
            
            return submissionComponent.searchByForm(kapp.getForm( new String("portal-searches") ), searchOptions);
        }
        
        public List<Submission> approvalAlertsSubmissions() {
            com.kineticdata.core.authentication.Identity identity =
                (com.kineticdata.core.authentication.Identity) request.getAttribute("identity");

            java.util.Map<String,String[]> searchOptions = new java.util.HashMap<>();
            searchOptions.put("values[Assigned Individual]", new String[] {identity.getUsername()});
            searchOptions.put("limit", new String[] {"999"});
            searchOptions.put("type", new String[] {"Approval"});
            searchOptions.put("coreState", new String[] {"Draft"});   

            return submissionComponent.searchByKapp(kapp, searchOptions);
        }

        public List<Submission> broadcastAlertsSubmissions () {
            java.util.Map<String,String[]> searchOptions = new java.util.HashMap<>();
            searchOptions.put("limit", new String[] {"999"});
            searchOptions.put("values[Status]", new String[] {"Active"}); 

            return submissionComponent.searchByForm(space.getKapp( new String("helper") ).getForm( new String("broadcast-alerts")), searchOptions);
        }

        public List<Submission> serviceReviewSubmissions(String formSlug) {
            java.util.Map<String,String[]> searchOptions = new java.util.HashMap<>();
            searchOptions.put("limit", new String[] {"999"});
            searchOptions.put("values[Form Slug]", new String[] {formSlug});

            return submissionComponent.searchByForm(kapp.getForm( new String("service-reviews") ), searchOptions);
        }

    }
%>